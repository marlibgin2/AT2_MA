function plotLatt(LS,varargin)
% Plots lattice functions and performance parameters
% This function takes as input a structure generated by the cLatt function
% Many plots are availeble, typical use is
% is to comment out plots that are not of interest as a large number of
% plots is produced
% 
%% Inputs
% Mandatory arguments
% LS: structure generated by the cLatt function.
%
% Optional arguments
%
% plotDA options
% xminplot : minimum horizontal limit for DA plot [m]
% xmaxplot : maximum horizontal limit for DA plot [m]
% ymaxplot : maximum vertical limits for DA plots are (0,ymaxplot) [m]
%            If not given, the two values above are taken from
%            DAS.outputs.DAoptions
%
% dpminplot : minimum energy deviation for xdp and ydp plots
% dpmaxplot : maximum energy deviation for xdp and ydp plots
%
% plotTuneMap options
% zoom: zoom factor for tune diagram plots , default = 1.0
% dqx     : horizontal half width of square in tune space for FMA plots,
%           default = 0.001
% dqy     : vertical half width of square in tune space for FMA plots,
%           default = 0.001 
%
% Optional flags
%
% 'all'       : all plots
% 'basic'     : basic plots: lattice parameters, design orbit
% 'DAxy'      : dynamic aperture on the (x,y) plane on-energy 
%               and off-energy without errors.
% 'DAxydp'    : dynamic aperture on the (x,dp) and (y,dp) planes  
%               without errors.
% 'DAdistxy'  : DA distribution with errors on the (x,y) plane. 
% 'DAdistxydp': DA distribution with errors on the (x,dp) and (y,dp) planes.
% 'TMs'       : all tune maps
% 'TM_xy'     : tune map along x and y axes
% 'TM_gridxy' : tunes on a grid of points on on (x,y) plane.
% 'TM_gridxdp': tunes on a grid of points on the (x,dp) plane
% 'TM_gridydp': tunes on a grid of points on the (x,dp) plane
% 'TM_difxy'  : tune diffusion map on the (x,y) plane 
% 'TM_difxdp' : tune diffusion map on the (x,dp) plane
% 'TM_difydp' : tune diffusion map on the (y,dp) plane 
% 'TM_chro'   : chromatic tune map
% 'LMA'       : Local Momentum Aperture for one achromat wihtout
%               errors
% 'LMAdist'   : Local Momentum Aperture for whole ring with errors 
% 'TLTdist'   : Touschek lifetime for ring with errors
%
%% Usage examples
% plotLattice(m4_standard,'all');
% plotLattice(m4_standard,'TMs');
% plotLattice(m4_standard,'DAs');

%% History
% 2024/07 first version
% 2024/07/06 : added conditional plotting
%
%% Input argument parsing

basicf      = any(strcmpi(varargin,'basic'));
allf        = any(strcmpi(varargin,'all'));
DAsf        = any(strcmpi(varargin,'DAs'));
DAxyf       = any(strcmpi(varargin,'DAxy'));
DAxydpf     = any(strcmpi(varargin,'DAxydp'));
DAdistxyf   = any(strcmpi(varargin,'DAdistxy'));
DAdistxydpf = any(strcmpi(varargin,'DAdistxydp'));
TMsf        = any(strcmpi(varargin,'TMs'));
TM_xyf      = any(strcmpi(varargin,'TM_xy'));
TM_gridxyf  = any(strcmpi(varargin,'TM_gridxy'));
TM_gridxdpf = any(strcmpi(varargin,'TM_gridxdp'));
TM_gridydpf = any(strcmpi(varargin,'TM_gridydp'));
TM_difxyf   = any(strcmpi(varargin,'TM_difxy'));
TM_difxdpf  = any(strcmpi(varargin,'TM_difxdp'));
TM_difydpf  = any(strcmpi(varargin,'TM_difydp'));
TM_chrof    = any(strcmpi(varargin,'TM_chro'));
LMAf        = any(strcmpi(varargin,'LMA'));
LMAdistf    = any(strcmpi(varargin,'LMAdist'));
TLTdistf    = any(strcmpi(varargin,'TLTdist'));
%
xminplot  = getoption(varargin,'xminplot',-LS.cLoptions.DAoptions.XmaxDA);
xmaxplot  = getoption(varargin,'xmaxplot', LS.cLoptions.DAoptions.XmaxDA);
ymaxplot  = getoption(varargin,'ymaxplot',LS.cLoptions.DAoptions.YmaxDA);
dpminplot = getoption(varargin,'dpminplot',LS.cLoptions.DAoptions.dpmin);
dpmaxplot = getoption(varargin,'dpmaxplot',LS.cLoptions.DAoptions.dpmax);
%
zoom        = getoption(varargin,'zoom',1);
dqx         = getoption(varargin,'dqx',0.001);
dqy         = getoption(varargin,'dqy',0.001);

%% Basic Plots
if (allf||basicf)
%% Twiss parameters and Physical Aperture
    if (not(isempty(LS.ACHROMAT)))
        atplot(LS.ACHROMAT);
        plotEAperture(LS.ACHROMAT);
    else
        fprintf('%s plotLattice: Warning - ACHROMAT cell array is empty. \n', datetime)
    end

%% Design orbit deviation 
    if (not(isempty(LS.LattData.DesignOrbit.Deviation)))
        plotDO(LS,'dev');
    else
        fprintf('%s plotLattice: Warning - Design Orbit arrays are empty. \n', datetime)
    end

%% Field and Gradient
    if (not(isempty(LS.LattData.FG.Spos)))
        plotfield(LS.LattData.FG);
    else
        fprintf('%s plotLattice: Warning - Field arrays are empty. \n', datetime);
    end
end
%% Dynamic Aperture without errors on and off-energy
if (allf||DAsf||DAxyf)
    if(not(isempty(fieldnames(LS.LattPerf.DA.xy_0))))
        plotDA(LS.LattPerf.DA.xy_0,'xminplot',xminplot,...
               'xmaxplot',xmaxplot,'ymaxplot',ymaxplot);
    else
        fprintf('%s plotLattice: Warning - DA.xy_0 structure empty. \n', datetime);
    end

    if(not(isempty(fieldnames(LS.LattPerf.DA.xy_p3))))
        plotDA(LS.LattPerf.DA.xy_p3,'xminplot',xminplot,...
               'xmaxplot',xmaxplot,'ymaxplot',ymaxplot);
    else
        fprintf('%s plotLattice: Warning - DA.xy_p3 structure empty. \n', datetime);
    end

    if(not(isempty(fieldnames(LS.LattPerf.DA.xy_m3))))
        plotDA(LS.LattPerf.DA.xy_m3, 'xminplot',xminplot,...
               'xmaxplot',xmaxplot,'ymaxplot',ymaxplot);
    else
        fprintf('%s plotLattice: Warning - DA.xy_m3 structure empty. \n', datetime);
    end
end

%% Dynamic Aperture without errors in (x,dp) and (y,dp) planes
if (allf||DAsf||DAxydpf)
    if(not(isempty(fieldnames(LS.LattPerf.DA.xydp))))
        plotDA(LS.LattPerf.DA.xydp,'xminplot',xminplot,...
               'xmaxplot',xmaxplot,'ymaxplot',ymaxplot,...
               'dpminplot',dpminplot,'dpmaxplot',dpmaxplot);
    else
        fprintf('%s plotLattice: Warning - DA.xydp structure empty. \n', datetime);
    end
end

%% Dynamic aperture with errors on( x,y) plane
if (allf||DAsf||DAdistxyf)
    if(not(isempty(fieldnames(LS.LattPerf.DAdist.xy))))
        plotDAdist(LS.LattPerf.DAdist.xy,'plotorbrms');
    else
        fprintf('%s plotLattice: Warning - DAdist.xy structure empty. \n', datetime);
    end
end

%% Dynamic aperture with errors on( x,dp) and (y,p) planes
if (allf||DAsf||DAdistxydpf)
    if(not(isempty(fieldnames(LS.LattPerf.DAdist.xydp))))
        plotDAdist(LS.LattPerf.DAdist.xydp);
    else
        fprintf('%s plotLattice: Warning - DAdist.xydp structure empty. \n', datetime);
    end
end

%% Tune maps
if (allf||TMsf||TM_xyf)
    if(not(isempty(fieldnames(LS.LattPerf.TM.xy))))
        plotTuneMap(LS.LattPerf.TM.xy,'plotmode','rel');
    else
        fprintf('%s plotLattice: Warning - TM.xy structure empty. \n', datetime);
    end
end

if (allf||TMsf||TM_chrof)
    if(not(isempty(fieldnames(LS.LattPerf.TM.chro))))
        plotTuneMap(LS.LattPerf.TM.chro,'plotmode','rel');
    else
        fprintf('%s plotLattice: Warning - TM.chro structure empty. \n', datetime);
    end
end

if (allf||TMsf||TM_gridxyf)
    if(not(isempty(fieldnames(LS.LattPerf.TM.gridxy))))
        plotTuneMap(LS.LattPerf.TM.gridxy);
    else
        fprintf('%s plotLattice: Warning - TM.gridxy structure empty. \n', datetime);
    end
end

if(allf||TMsf||TM_gridxdpf)
    if(not(isempty(fieldnames(LS.LattPerf.TM.gridxdp))))
        plotTuneMap(LS.LattPerf.TM.gridxdp);
    else
        fprintf('%s plotLattice: Warning - TM.gridxdp structure empty. \n', datetime);
    end
end

if(allf||TMsf||TM_gridxdpf)
    if(not(isempty(fieldnames(LS.LattPerf.TM.gridxdp))))
        plotTuneMap(LS.LattPerf.TM.gridydp);
    else
        fprintf('%s plotLattice: Warning - TM.gridydp structure empty. \n', datetime);
    end
end

if (allf||TMsf||TM_difxyf)
    if(not(isempty(fieldnames(LS.LattPerf.TM.difxy)))) 
        plotTuneMap(LS.LattPerf.TM.difxy,'caxrange',[-10 -2],'rate');
        qxav = LS.LattPerf.atsummary.tunes(1) + nanmean(LS.LattPerf.TM.difxy.outputs.dQxgridxy);
        qyav = LS.LattPerf.atsummary.tunes(2) + nanmean(LS.LattPerf.TM.difxy.outputs.dQygridxy);
        qxmin=LS.LattPerf.atsummary.tunes(1) + min(LS.LattPerf.TM.difxy.outputs.dQxgridxy);
        qxmax=LS.LattPerf.atsummary.tunes(1) + max(LS.LattPerf.TM.difxy.outputs.dQxgridxy);
        qymin=LS.LattPerf.atsummary.tunes(2) + min(LS.LattPerf.TM.difxy.outputs.dQygridxy);
        qymax=LS.LattPerf.atsummary.tunes(2) + max(LS.LattPerf.TM.difxy.outputs.dQygridxy);
        DQx = qxmax-qxmin;
        DQy = qymax-qymin;
        DQ = max(DQx,DQy)/zoom;
        qxmin=max(qxav - DQ/2,0);
        qxmax=min(qxav + DQ/2,1);
        qymin=max(qyav - DQ/2,0);
        qymax=min(qyav + DQ/2,1);
        plotTuneMap(LS.LattPerf.TM.difxy,'plottype','fmxy','qxrange',...
            [qxmin qxmax],'qyrange',[qymin qymax],'dqx',dqx,'dqy',dqy,'rate');
    else
        fprintf('%s plotLattice: Warning - TM.difxy structure empty. \n', datetime);
    end
end

if (allf||TMsf||TM_difxdpf)
    if(not(isempty(fieldnames(LS.LattPerf.TM.difxdp))))
        plotTuneMap(LS.LattPerf.TM.difxdp,'caxrange',[-10 -2],'rate');
        qxav = LS.LattPerf.atsummary.tunes(1) + nanmean(LS.LattPerf.TM.difxdp.outputs.dQxgridxdp);
        qyav = LS.LattPerf.atsummary.tunes(2) + nanmean(LS.LattPerf.TM.difxdp.outputs.dQygridxdp);
        qxmin=LS.LattPerf.atsummary.tunes(1) + min(LS.LattPerf.TM.difxdp.outputs.dQxgridxdp);
        qxmax=LS.LattPerf.atsummary.tunes(1) + max(LS.LattPerf.TM.difxdp.outputs.dQxgridxdp);
        qymin=LS.LattPerf.atsummary.tunes(2) + min(LS.LattPerf.TM.difxdp.outputs.dQygridxdp);
        qymax=LS.LattPerf.atsummary.tunes(2) + max(LS.LattPerf.TM.difxdp.outputs.dQygridxdp);
        DQx = qxmax-qxmin;
        DQy = qymax-qymin;
        DQ = max(DQx,DQy)/zoom;
        qxmin=max(qxav - DQ/2,0);
        qxmax=min(qxav + DQ/2,1);
        qymin=max(qyav - DQ/2,0);
        qymax=min(qyav + DQ/2,1);
        plotTuneMap(LS.LattPerf.TM.difxdp,'plottype','fmxdp','qxrange',...
            [qxmin qxmax],'qyrange',[qymin qymax],'dqx',dqx,'dqy',dqy);
    else
        fprintf('%s plotLattice: Warning - TM.difxdp structure empty. \n', datetime);
    end
end

if (allf||TMsf||TM_difydpf)
    if(not(isempty(fieldnames(LS.LattPerf.TM.difydp))))
        plotTuneMap(LS.LattPerf.TM.difydp,'caxrange',[-10 -2],'rate');
        qxav = LS.LattPerf.atsummary.tunes(1) + nanmean(LS.LattPerf.TM.difydp.outputs.dQxgridydp);
        qyav = LS.LattPerf.atsummary.tunes(2) + nanmean(LS.LattPerf.TM.difydp.outputs.dQygridydp);
        qxmin=LS.LattPerf.atsummary.tunes(1) + min(LS.LattPerf.TM.difydp.outputs.dQxgridydp);
        qxmax=LS.LattPerf.atsummary.tunes(1) + max(LS.LattPerf.TM.difydp.outputs.dQxgridydp);
        qymin=LS.LattPerf.atsummary.tunes(2) + min(LS.LattPerf.TM.difydp.outputs.dQygridydp);
        qymax=LS.LattPerf.atsummary.tunes(2) + max(LS.LattPerf.TM.difydp.outputs.dQygridydp);
        DQx = qxmax-qxmin;
        DQy = qymax-qymin;
        DQ = max(DQx,DQy)/zoom;
        qxmin=max(qxav - DQ/2,0);
        qxmax=min(qxav + DQ/2,1);
        qymin=max(qyav - DQ/2,0);
        qymax=min(qyav + DQ/2,1);
        plotTuneMap(LS.LattPerf.TM.difydp,'plottype','fmydp',...
            'qxrange',[qxmin qxmax],'qyrange',[qymin qymax],...
            'dqx',dqx,'dqy',dqy,'rate');
    else
        fprintf('%s plotLattice: Warning - TM.difydp structure empty. \n', datetime);
    end
end




%% Local Momentum Aperture without errors 

if (allf||LMAf)
    if(not(isempty(fieldnames(LS.LattPerf.LMA))))
        plotLMA(LS.LattPerf.LMA,'dpminplot',dpminplot,'dpmaxplot',dpmaxplot);
    else
        fprintf('%s plotLattice: Warning - LMA structure empty. \n', datetime);
        if(not(isempty(fieldnames(LS.LattPerf.TL))))
            plotLMA(LS.LattPerf.TL.outputs.LMA,...
                    'dpminplot',dpminplot,'dpmaxplot',dpmaxplot); 
        else  
            fprintf('%s plotLattice: Warning - TL structure empty. \n', datetime);
        end
    end
end


%% Local Momentum aperture with errors
if (allf||LMAdistf)
    if(not(isempty(fieldnames(LS.LattPerf.LMAdist))))
        plotLMAdist(LS.LattPerf.LMAdist,'dpminplot',dpminplot,'dpmaxplot',dpmaxplot);
    else
        fprintf('%s plotLattice: Warning - LMAdist structure empty. \n', datetime);
        if(not(isempty(fieldnames(LS.LattPerf.TLdist))))
            plotLMAdist(LS.LattPerf.TLdist.outputs.LMAdist,...
                'dpminplot',dpminplot,'dpmaxplot',dpmaxplot);
        else
            fprintf('%s plotLattice: Warning - TLdist structure empty. \n', datetime);
        end
    end
end

%% Touschek lifetime with errors
if (allf||TLTdistf)
    if(not(isempty(fieldnames(LS.LattPerf.TLdist))))
        plotTLTdist(LS.LattPerf.TLdist);
    else
        fprintf('%s plotLattice: Warning - TLdist structure empty. \n', datetime);
    end
end




