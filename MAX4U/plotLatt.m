function plotLatt(LS,varargin)
% Plots lattice functions and performance parameters
% This function takes as input a structure generated by the cLatt function
% Many plots are available, and may be chosen through optional flags. 
% 
%% Inputs
% Mandatory arguments
% LS: structure generated by the cLatt function.
%
% Optional arguments
%
% plotDA options
% xminplot : minimum horizontal limit for DA plot [m]
% xmaxplot : maximum horizontal limit for DA plot [m]
% ymaxplot : maximum vertical limits for DA plots are (0,ymaxplot) [m]
%            If not given, the two values above are taken from
%            DAS.outputs.DAoptions
%
% dpminplot : minimum energy deviation for xdp and ydp DA plots
% dpmaxplot : maximum energy deviation for xdp and ydp DA plots
%
% plotTuneMap options
% zoom: zoom factor for tune diagram plots , default = 1.0
% dqx     : horizontal half width of square in tune space for FMA plots,
%           default = 0.001
% dqy     : vertical half width of square in tune space for FMA plots,
%           default = 0.001 
% xminplot_dm : minimum horizontal limit for tune diffusion maps [m]
% xmaxplot_dm : maximum horizontal limit for tune diffusion maps  [m]
% ymaxplot_dm : maximum vertical limits for tune diffusion maps  [m] %
% yminplot_dm : maximum vertical limits for tune diffusion maps  [m] %
%
% dpminplot_dm : minimum energy deviation for xdp and ydp plots
% dpmaxplot_dm : maximum energy deviation for xdp and ydp plots
%
% dpminplotLMA : minimum energy deviation for LMA plots
% dpmaxplotLMA : maximum energy deviation for LMA plots
% caxrange     : color axis scale for tune diffusion maps of single
%                achromat, default = "auto"
% caxrange_r   : color axis range for full ring diffusion maps, default =
%                "auto"
%
% Optional flags
%
% 'all'       : all plots
% 'basic'     : basic plots: lattice parameters, design orbit
% 'bascor'    : corrected orbit rms
% 'DAxy'      : dynamic aperture on the (x,y) plane on-energy 
%               and off-energy without errors.
% 'DAxydp'    : dynamic aperture on the (x,dp) and (y,dp) planes  
%               without errors.
% 'DAdistxy'  : DA distribution with errors on the (x,y) plane. 
% 'DAdistxydp': DA distribution with errors on the (x,dp) and (y,dp) planes.
% 'TMs'       : all tune maps
% 'TM_xy'     : tune map along x and y axes
% 'TM_gridxy' : tunes on a grid of points on on (x,y) plane.
% 'TM_gridxdp': tunes on a grid of points on the (x,dp) plane
% 'TM_gridydp': tunes on a grid of points on the (x,dp) plane
% 'TM_difxy'  : tune diffusion map on the (x,y) plane 
% 'TM_difxdp' : tune diffusion map on the (x,dp) plane
% 'TM_difydp' : tune diffusion map on the (y,dp) plane 
% 'TM_chro'   : chromatic tune map
% 'LMA'       : Local Momentum Aperture for one achromat wihtout
%               errors
% 'LMAdist'   : Local Momentum Aperture for whole ring with errors 
% 'TLTdist'   : Touschek lifetime for ring with errors
% 'TMdist'    : Tune maps for full ring with errors
% 'nogrid'    : supresses grid plots
%
% 'save' : exports all plots to a pdf file
%
%% Usage examples
% plotLattice(m4_standard,'all');
% plotLattice(m4_standard,'TMs');
% plotLattice(m4_standard,'DAs');

%% History
% PFT 2024/07 first version
% PFT 2024/07/06 : added conditional plotting
% PFT 2024/07/10 : added saving to pdf file
% PFT 2024/07/13 : added plot of difusion map with errors
% PFT 2024/07/16 : adapted tune map plots to the the new plot_net function
%                  that can handle the integer part of the tune.
%                  added plot of challenge levels, removing families
%                  for which no equivalent family in the MagnetStrengthLimits
%                  has been defined
% PFT 2024/07/22 : changed name from plotDO to plotGO 
% PFT 2024/07/26 : added plots of corrected orbit based on ERlat structure
%                  calculated by the "generate_errlatt" function
%% Input argument parsing

basicf      = any(strcmpi(varargin,'basic'));
allf        = any(strcmpi(varargin,'all'));
bascorf     = any(strcmpi(varargin,'bascor'));
DAsf        = any(strcmpi(varargin,'DAs'));
DAxyf       = any(strcmpi(varargin,'DAxy'));
DAxydpf     = any(strcmpi(varargin,'DAxydp'));
DAdistxyf   = any(strcmpi(varargin,'DAdistxy'));
DAdistxydpf = any(strcmpi(varargin,'DAdistxydp'));
TMsf        = any(strcmpi(varargin,'TMs'));
TM_xyf      = any(strcmpi(varargin,'TM_xy'));
TM_gridxyf  = any(strcmpi(varargin,'TM_gridxy'));
TM_gridxdpf = any(strcmpi(varargin,'TM_gridxdp'));
TM_gridydpf = any(strcmpi(varargin,'TM_gridydp'));
TM_difxyf   = any(strcmpi(varargin,'TM_difxy'));
TM_difxdpf  = any(strcmpi(varargin,'TM_difxdp'));
TM_difydpf  = any(strcmpi(varargin,'TM_difydp'));
TM_chrof    = any(strcmpi(varargin,'TM_chro'));
LMAf        = any(strcmpi(varargin,'LMA'));
LMAdistf    = any(strcmpi(varargin,'LMAdist'));
TLTdistf    = any(strcmpi(varargin,'TLTdist'));
TMdistf     = any(strcmpi(varargin,'TMdist'));
nogridf     = any(strcmpi(varargin,'nogrid'));
%
savef       = any(strcmpi(varargin,'save'));
%
xminplot     = getoption(varargin,'xminplot',-LS.cLoptions.DAoptions.XmaxDA);
xmaxplot     = getoption(varargin,'xmaxplot', LS.cLoptions.DAoptions.XmaxDA);
ymaxplot     = getoption(varargin,'ymaxplot',LS.cLoptions.DAoptions.YmaxDA);
dpminplot    = getoption(varargin,'dpminplot',LS.cLoptions.DAoptions.dpmin);
dpmaxplot    = getoption(varargin,'dpmaxplot',LS.cLoptions.DAoptions.dpmax);

xminplot_dm  = getoption(varargin,'xminplot_dm', LS.cLoptions.TMoptions.xmin_dm);
xmaxplot_dm  = getoption(varargin,'xmaxplot_dm', LS.cLoptions.TMoptions.xmax_dm);
yminplot_dm  = getoption(varargin,'yminplot_dm', 0.0);
ymaxplot_dm  = getoption(varargin,'ymaxplot_dm', LS.cLoptions.TMoptions.ymax_dm);
dpminplot_dm = getoption(varargin,'dpminplot_dm',LS.cLoptions.TMoptions.dpmin_dm);
dpmaxplot_dm = getoption(varargin,'dpmaxplot_dm',LS.cLoptions.TMoptions.dpmax_dm);

dpmaxplotLMA = getoption(varargin,'dpmaxplotLMA',LS.cLoptions.MAoptions.deltalimit);
dpminplotLMA = getoption(varargin,'dpminplotLMA',-LS.cLoptions.MAoptions.deltalimit);

zoom        = getoption(varargin,'zoom',1);
dqx         = getoption(varargin,'dqx',0.001);
dqy         = getoption(varargin,'dqy',0.001);
caxrange    = getoption(varargin,'caxrange','auto');
caxrange_r  = getoption(varargin,'caxrange_r','auto');
%

%% Creates export file
if (savef)
    fn=strcat(LS.Lattice_Name,'.pdf');
    
    exportgraphics(gcf,fn);
end

%% Basic Plots
if (allf||basicf)
%% Parameter Table

    fsum=figure('Name','Lattice Evaluation');
    fsum.Position=[1150 96 768 710];
    smm=LS.LattPerf.atsummary;
    
    attext = {sprintf('   *************  Summary for ''%s'' ************\n', LS.Lattice_Name)};
    attext = [attext; sprintf(' %s \n', datetime) ];
    attext = [attext;sprintf('   Energy: \t\t\t %2.1f GeV\n', smm.e0)];
    attext = [attext;sprintf('   Circumference: \t\t %3.1f m\n', smm.circumference)];
    attext = [attext;sprintf('   Full tunes H/V: \t\t %4.2f / %4.2f\n', smm.Itunes(1),smm.Itunes(2))];
    attext = [attext;sprintf('   Momentum Compaction Factor: \t %3.2e\n', smm.compactionFactor)];
    attext = [attext;sprintf('   Chromaticity H: \t\t%+4.2f\n', smm.chromaticity(1))];
    attext = [attext;sprintf('   Chromaticity V: \t\t%+4.2f\n', smm.chromaticity(2))];
    attext = [attext;sprintf('   Radiation Loss: \t\t% 4.1f keV\n', smm.radiation*1e6)];
    attext = [attext;sprintf('   Natural Energy Spread: \t% 3.2f %%\n', smm.naturalEnergySpread*100)];
    attext = [attext;sprintf('   Natural Emittance: \t\t% 4.1f pmrad\n', smm.naturalEmittance*1E12)];
    attext = [attext;sprintf('   RF Voltage: \t% 3.1f MV\n', LS.LattData.V0/1e6)];
    if (isfield(smm,'achrnatchrom'))
        attext = [attext;sprintf('   Achromat natural chromaticities: H/V\t\t %3.2f / %3.2f\n', smm.achrnatchrom(1),smm.achrnatchrom(2))];
    end
    if (isfield(smm,'achrtunes'))
        attext = [attext;sprintf('   Achromat tunes  H/V: \t\t %3.2f / %3.2f\n', smm.achrtunes(1),smm.achrtunes(2))];
    end
    %{

            fprintf('                   Frequency: \t% 4.5f [MHz]\n', freq/1e6);
            fprintf('             Harmonic Number: \t% 4.0f\n', smm.harmon);
            fprintf('   Overvoltage factor: \t\t% 4.5f\n', smm.overvoltage);
            fprintf('   Synchronous Phase:  \t\t% 4.5f [rad] (%4.5f [deg])\n', smm.syncphase, smm.syncphase*180/pi);
            fprintf('   Linear Energy Acceptance:  \t% 4.3f %%\n', smm.energyacceptance*100);
            fprintf('   Synchrotron Tune:   \t\t% 4.5f (%4.5f kHz or %4.2f turns) \n', smm.synctune, smm.synctune/smm.revTime*1e-3, 1/smm.synctune);
            fprintf('   Bunch Length:       \t\t% 4.5f [mm] (%4.5f ps)\n', smm.bunchlength*1e3, bunchtime*1e12);
            fprintf(SeparatorString);
            fprintf('   Injection:\n');
            fprintf('   H: beta = %06.3f [m] alpha = %+04.1e eta = %+04.3f [m] eta'' = %+04.1e \n', bx(1), ax(1), etax(1), etaprimex(1));
            fprintf('   V: beta = %06.3f [m] alpha = %+04.1e eta = %+04.3f [m] eta'' = %+04.1e \n', by(1), ay(1), etay(1), etaprimey(1));
            fprintf('   ********** End of Summary for ''%s'' **********\n', LatticeName);
            fprintf('\n');
    %}
    dim=[0.2 0.9 0.9 0.0];
    annotation('textbox', dim, 'String',attext,'FitBoxToText','on');
    h = gca; h.XAxis.Visible = 'off';h.YAxis.Visible = 'off';
    if (savef)
            exportgraphics(gcf,fn);
    end
    hold off;

%% Twiss parameters and Physical Aperture
    if (not(isempty(LS.ACHROMAT)))
        figure;atplot(LS.ACHROMAT);title(LS.Lattice_Name);hold off;
        if (savef)
            exportgraphics(gcf,fn,'Append',true);
        end

        plotEAperture(LS.ACHROMAT,'plottitle',LS.Lattice_Name);

        if (savef)
            exportgraphics(gcf,fn,'Append',true);
        end
    else
        fprintf('%s plotLattice: Warning - ACHROMAT cell array is empty. \n', datetime)
    end

%% Design orbit deviation 
    if(isfield(LS.LattData,'geometry'))
      if (not(isempty(fields(LS.LattData.geometry))))
        plotGO(LS,'dodev');
        if (savef)
            exportgraphics(gcf,fn,'Append',true);
        end
      else
        fprintf('%s plotLattice: Warning orbit dev - geometry structure empty. \n', datetime)
      end
    else
        fprintf('%s plotLattice: Warning orbit dev - geometry structure not available. \n', datetime)
    end

%% Magnet Centres 
    if (isfield(LS.LattData,'geometry'))
      if (not(isempty(fields(LS.LattData.geometry))))
          plotGO(LS,'magcdev');
          if (savef)
              exportgraphics(gcf,fn,'Append',true);
          end
      else
          fprintf('%s plotLattice: Warning magnet centres - geometry structure empty. \n', datetime);
      end
    else
        fprintf('%s plotLattice: Warning - geometry centers structure not available. \n', datetime);
    end


%% Field and Gradient
    if (not(isempty(LS.LattData.FG.Spos)))
        plotfield(LS.LattData.FG);
        if (savef)
            exportgraphics(gcf,fn,'Append',true);
        end
    else
        fprintf('%s plotLattice: Warning - Field arrays are empty. \n', datetime);
    end

%% Challenge Levels
    if (not(isempty(fields(LS.LattData.CLv))))
        Fams   = replace(LS.cLoptions.All_famsO,'_','-');
        CL     = LS.LattData.CLv.outputs.CL;
        CL_c   = CL(~isnan(CL));
        Fams   = Fams(~isnan(CL));
        Fams_c = categorical(Fams);
        figure;bar(Fams_c,CL_c);ylim([0,5]);
        title(strcat(LS.Lattice_Name,{' Challenge Levels'}));
        ylim([0 5]);
        if (savef)
            exportgraphics(gcf,fn,'Append',true);
        end
    else
        fprintf('%s plotLattice: Warning - Challenge Levels fields are empty. \n', datetime);
    end


end
%% Dynamic Aperture without errors on and off-energy
if (allf||DAsf||DAxyf)
    if(not(isempty(fieldnames(LS.LattPerf.DA.xy_0))))
        plotDA(LS.LattPerf.DA.xy_0,'xminplot',xminplot,...
               'xmaxplot',xmaxplot,'ymaxplot',ymaxplot,...
               'plottitle',LS.Lattice_Name);
        if (savef)
            exportgraphics(gcf,fn,'Append',true);
        end
    else
        fprintf('%s plotLattice: Warning - DA.xy_0 structure empty. \n', datetime);
    end

    if(not(isempty(fieldnames(LS.LattPerf.DA.xy_p3))))
        plotDA(LS.LattPerf.DA.xy_p3,'xminplot',xminplot,...
               'xmaxplot',xmaxplot,'ymaxplot',ymaxplot,...
               'plottitle',LS.Lattice_Name);
        if (savef)
            exportgraphics(gcf,fn,'Append',true);
        end
    else
        fprintf('%s plotLattice: Warning - DA.xy_p3 structure empty. \n', datetime);
    end

    if(not(isempty(fieldnames(LS.LattPerf.DA.xy_m3))))
        plotDA(LS.LattPerf.DA.xy_m3, 'xminplot',xminplot,...
               'xmaxplot',xmaxplot,'ymaxplot',ymaxplot,...
               'plottitle',LS.Lattice_Name);
        if (savef)
            exportgraphics(gcf,fn,'Append',true);
        end
    else
        fprintf('%s plotLattice: Warning - DA.xy_m3 structure empty. \n', datetime);
    end
end

%% Dynamic Aperture without errors in (x,dp) and (y,dp) planes
if (allf||DAsf||DAxydpf)
    if(not(isempty(fieldnames(LS.LattPerf.DA.xydp))))
        phandles=plotDA(LS.LattPerf.DA.xydp,'xminplot',xminplot,...
               'xmaxplot',xmaxplot,'ymaxplot',ymaxplot,...
               'dpminplot',dpminplot,'dpmaxplot',dpmaxplot, ...
               'plottitle',LS.Lattice_Name);
        if (savef)
            nhandles=numel(phandles);
            for i=1:nhandles
                exportgraphics(phandles{i},fn,'Append',true);
            end
        end
    else
        fprintf('%s plotLattice: Warning - DA.xydp structure empty. \n', datetime);
    end
end

%% Orbit RMS for lattices with errors
if (allf||bascorf)
    if(not(isempty(fields(LS.LattPerf.ERlat))))
        phandles=plotOrbdist(LS.LattPerf.ERlat,'plottitle', LS.Lattice_Name);
        if (savef)
            nhandles=numel(phandles);
            for i=1:nhandles
                exportgraphics(phandles{i},fn,'Append',true);
            end
        end
    else
        fprintf('%s plotLattice: Warning - ERlat structure empty. \n', datetime);
    end
end

%% Dynamic aperture with errors on(x,y) plane
if (allf||DAsf||DAdistxyf)
    if(not(isempty(fieldnames(LS.LattPerf.DAdist.xy))))
        phandles=plotDAdist(LS.LattPerf.DAdist.xy,...
            'xmaxplot',xmaxplot,'ymaxplot',ymaxplot,...
            'xminplot',xminplot,...
            'plottitle',LS.Lattice_Name,'plotorbrms');
        if (savef)
            nhandles=numel(phandles);
            for i=1:nhandles
                exportgraphics(phandles{i},fn,'Append',true);
            end
        end
    else
        fprintf('%s plotLattice: Warning - DAdist.xy structure empty. \n', datetime);
    end
end

%% Dynamic aperture with errors on(x,dp) and (y,p) planes
if (allf||DAsf||DAdistxydpf)
    if(not(isempty(fieldnames(LS.LattPerf.DAdist.xydp))))
        phandles=plotDAdist(LS.LattPerf.DAdist.xydp,'dpminplot',dpminplot, ...
            'dpmaxplot',dpmaxplot,'xminplot',xminplot,...
            'xmaxplot',xmaxplot,'ymaxplot',ymaxplot,...
            'plottitle',LS.Lattice_Name);
        if (savef)
            nhandles=numel(phandles);
            for i=1:nhandles
                exportgraphics(phandles{i},fn,'Append',true);
            end
        end
    else
        fprintf('%s plotLattice: Warning - DAdist.xydp structure empty. \n', datetime);
    end
end

%% Tune maps for single achromat without errors
if (allf||TMsf||TM_xyf)
    if(not(isempty(fieldnames(LS.LattPerf.TM.xy))))
        phandles=plotTuneMap(LS.LattPerf.TM.xy,'plotmode','rel',...
            'plottitle',LS.Lattice_Name);
        if (savef)
            nhandles=numel(phandles);
            for i=1:nhandles
                exportgraphics(phandles{i},fn,'Append',true);
            end
        end
    else
        fprintf('%s plotLattice: Warning - TM.xy structure empty. \n', datetime);
    end
end

if (allf||TMsf||TM_chrof)
    if(not(isempty(fieldnames(LS.LattPerf.TM.chro))))
        phandles=plotTuneMap(LS.LattPerf.TM.chro,'plotmode','rel',...
            'plottitle',LS.Lattice_Name);
        if (savef)
            nhandles=numel(phandles);
            for i=1:nhandles
                exportgraphics(phandles{i},fn,'Append',true);
            end
        end
    else
        fprintf('%s plotLattice: Warning - TM.chro structure empty. \n', datetime);
    end
end

if ((allf||TMsf||TM_gridxyf)&&not(nogridf))
    if(not(isempty(fieldnames(LS.LattPerf.TM.gridxy))))
        phandles=plotTuneMap(LS.LattPerf.TM.gridxy,...
            'plottitle',LS.Lattice_Name);
        if (savef)
            nhandles=numel(phandles);
            for i=1:nhandles
                exportgraphics(phandles{i},fn,'Append',true);
            end
        end
    else
        fprintf('%s plotLattice: Warning - TM.gridxy structure empty. \n', datetime);
    end
end

if((allf||TMsf||TM_gridxdpf)&&not(nogridf))
    if(not(isempty(fieldnames(LS.LattPerf.TM.gridxdp))))
        phandles=plotTuneMap(LS.LattPerf.TM.gridxdp,...
            'plottitle',LS.Lattice_Name);
        if (savef)
            nhandles=numel(phandles);
            for i=1:nhandles
                exportgraphics(phandles{i},fn,'Append',true);
            end
        end
    else
        fprintf('%s plotLattice: Warning - TM.gridxdp structure empty. \n', datetime);
    end
end

if((allf||TMsf||TM_gridydpf)&&not(nogridf))
    if(not(isempty(fieldnames(LS.LattPerf.TM.gridydp))))
        phandles=plotTuneMap(LS.LattPerf.TM.gridydp,...
            'plottitle',LS.Lattice_Name);
        if (savef)
            nhandles=numel(phandles);
            for i=1:nhandles
                exportgraphics(phandles{i},fn,'Append',true);
            end
        end
    else
        fprintf('%s plotLattice: Warning - TM.gridydp structure empty. \n', datetime);
    end
end

if (allf||TMsf||TM_difxyf)
    if(not(isempty(fieldnames(LS.LattPerf.TM.difxy)))) 
        phandles=plotTuneMap(LS.LattPerf.TM.difxy,'caxrange',caxrange,...
            'rate','xminplot_dm',xminplot_dm,'xmaxplot_dm',xmaxplot_dm,...
            'yminplot_dm',yminplot_dm,'ymaxplot_dm',ymaxplot_dm,...
            'plottitle',LS.Lattice_Name);
        if (savef)
            nhandles=numel(phandles);
            for i=1:nhandles
                exportgraphics(phandles{i},fn,'Append',true);
            end
        end
        qxav = LS.LattPerf.atsummary.Itunes(1) + nanmean(LS.LattPerf.TM.difxy.outputs.dQxgridxy);
        qyav = LS.LattPerf.atsummary.Itunes(2) + nanmean(LS.LattPerf.TM.difxy.outputs.dQygridxy);
        qxmin=LS.LattPerf.atsummary.Itunes(1) + min(LS.LattPerf.TM.difxy.outputs.dQxgridxy);
        qxmax=LS.LattPerf.atsummary.Itunes(1) + max(LS.LattPerf.TM.difxy.outputs.dQxgridxy);
        qymin=LS.LattPerf.atsummary.Itunes(2) + min(LS.LattPerf.TM.difxy.outputs.dQygridxy);
        qymax=LS.LattPerf.atsummary.Itunes(2) + max(LS.LattPerf.TM.difxy.outputs.dQygridxy);
        DQx = qxmax-qxmin;
        DQy = qymax-qymin;
        DQ = max(DQx,DQy)/zoom;
        qxmin=max(qxav - DQ/2,0);
        qxmax=qxav + DQ/2;
        qymin=max(qyav - DQ/2,0);
        qymax=qyav + DQ/2;
        phandles=plotTuneMap(LS.LattPerf.TM.difxy,'plottype','fmxy','qxrange',...
            [qxmin qxmax],'qyrange',[qymin qymax],'dqx',dqx,'dqy',dqy,'rate',...
            'caxrange',caxrange,'plottitle',LS.Lattice_Name);
        if (savef)
            nhandles=numel(phandles);
            for i=1:nhandles
                exportgraphics(phandles{i},fn,'Append',true);
            end
        end
    else
        fprintf('%s plotLattice: Warning - TM.difxy structure empty. \n', datetime);
    end
end

if (allf||TMsf||TM_difxdpf)
    if(not(isempty(fieldnames(LS.LattPerf.TM.difxdp))))
        phandles=plotTuneMap(LS.LattPerf.TM.difxdp,'caxrange',caxrange,'rate',...
            'xminplot_dm',xminplot_dm,'xmaxplot_dm',xmaxplot_dm,...
            'dpminplot_dm',dpminplot_dm,'dpmaxplot_dm',dpmaxplot_dm,...
            'plottitle',LS.Lattice_Name);
        if (savef)
            nhandles=numel(phandles);
            for i=1:nhandles
                exportgraphics(phandles{i},fn,'Append',true);
            end
        end
        qxav = LS.LattPerf.atsummary.Itunes(1) + nanmean(LS.LattPerf.TM.difxdp.outputs.dQxgridxdp);
        qyav = LS.LattPerf.atsummary.Itunes(2) + nanmean(LS.LattPerf.TM.difxdp.outputs.dQygridxdp);
        qxmin=LS.LattPerf.atsummary.Itunes(1) + min(LS.LattPerf.TM.difxdp.outputs.dQxgridxdp);
        qxmax=LS.LattPerf.atsummary.Itunes(1) + max(LS.LattPerf.TM.difxdp.outputs.dQxgridxdp);
        qymin=LS.LattPerf.atsummary.Itunes(2) + min(LS.LattPerf.TM.difxdp.outputs.dQygridxdp);
        qymax=LS.LattPerf.atsummary.Itunes(2) + max(LS.LattPerf.TM.difxdp.outputs.dQygridxdp);
        DQx = qxmax-qxmin;
        DQy = qymax-qymin;
        DQ = max(DQx,DQy)/zoom;
        qxmin=max(qxav - DQ/2,0);
        qxmax=qxav + DQ/2;
        qymin=max(qyav - DQ/2,0);
        qymax=qyav + DQ/2;
        phandles=plotTuneMap(LS.LattPerf.TM.difxdp,'plottype','fmxdp','qxrange',...
            [qxmin qxmax],'qyrange',[qymin qymax],'dqx',dqx,'dqy',dqy,...
            'caxrange',caxrange,'plottitle',LS.Lattice_Name);
        if (savef)
            nhandles=numel(phandles);
            for i=1:nhandles
                exportgraphics(phandles{i},fn,'Append',true);
            end
        end
    else
        fprintf('%s plotLattice: Warning - TM.difxdp structure empty. \n', datetime);
    end
end

if (allf||TMsf||TM_difydpf)
    if(not(isempty(fieldnames(LS.LattPerf.TM.difydp))))
        phandles=plotTuneMap(LS.LattPerf.TM.difydp,'caxrange',caxrange,'rate',...
            'dpminplot_dm',dpminplot_dm,'dpmaxplot_dm',dpmaxplot_dm,...
            'yminplot_dm',yminplot_dm,'ymaxplot_dm',ymaxplot_dm,...
            'plottitle',LS.Lattice_Name);
        if (savef)
            nhandles=numel(phandles);
            for i=1:nhandles
                exportgraphics(phandles{i},fn,'Append',true);
            end
        end
        qxav = LS.LattPerf.atsummary.Itunes(1) + nanmean(LS.LattPerf.TM.difydp.outputs.dQxgridydp);
        qyav = LS.LattPerf.atsummary.Itunes(2) + nanmean(LS.LattPerf.TM.difydp.outputs.dQygridydp);
        qxmin=LS.LattPerf.atsummary.Itunes(1) + min(LS.LattPerf.TM.difydp.outputs.dQxgridydp);
        qxmax=LS.LattPerf.atsummary.Itunes(1) + max(LS.LattPerf.TM.difydp.outputs.dQxgridydp);
        qymin=LS.LattPerf.atsummary.Itunes(2) + min(LS.LattPerf.TM.difydp.outputs.dQygridydp);
        qymax=LS.LattPerf.atsummary.Itunes(2) + max(LS.LattPerf.TM.difydp.outputs.dQygridydp);
        DQx = qxmax-qxmin;
        DQy = qymax-qymin;
        DQ = max(DQx,DQy)/zoom;
        qxmin=max(qxav - DQ/2,0);
        qxmax=qxav + DQ/2;
        qymin=max(qyav - DQ/2,0);
        qymax=qyav + DQ/2;
        phandles=plotTuneMap(LS.LattPerf.TM.difydp,'plottype','fmydp',...
            'qxrange',[qxmin qxmax],'qyrange',[qymin qymax],...
            'caxrange',caxrange,'dqx',dqx,'dqy',dqy,'rate',...
            'plottitle',LS.Lattice_Name);
        if (savef)
            nhandles=numel(phandles);
            for i=1:nhandles
                exportgraphics(phandles{i},fn,'Append',true);
            end
        end
    else
        fprintf('%s plotLattice: Warning - TM.difydp structure empty. \n', datetime);
    end
end

%% Local Momentum Aperture without errors 

if (allf||LMAf)
    if(not(isempty(fieldnames(LS.LattPerf.LMA))))
        plotLMA(LS.LattPerf.LMA,'dpminplot',dpminplotLMA,...
            'dpmaxplot',dpmaxplotLMA,'plottitle',LS.Lattice_Name);
        if (savef)
            exportgraphics(gcf,fn,'Append',true);
        end
    else
        fprintf('%s plotLattice: Warning - LMA structure empty. \n', datetime);
        if(not(isempty(fieldnames(LS.LattPerf.TL))))
            plotLMA(LS.LattPerf.TL.outputs.LMA,...
                    'dpminplot',dpminplotLMA,'dpmaxplot',dpmaxplotLMA); 
            if (savef)
                nhandles=numel(phandles);
                for i=1:nhandles
                    exportgraphics(phandles{i},fn,'Append',true);
                end
            end
        else  
            fprintf('%s plotLattice: Warning - TL structure empty. \n', datetime);
        end
    end
end


%% Local Momentum aperture with errors
if (allf||LMAdistf)
    if(not(isempty(fieldnames(LS.LattPerf.LMAdist))))
        phandles=plotLMAdist(LS.LattPerf.LMAdist,...
            'dpminplot',dpminplotLMA,'dpmaxplot',dpmaxplotLMA,...
            'plottitle',LS.Lattice_Name,'plotorbrms');
        if (savef)
            nhandles=numel(phandles);
            for i=1:nhandles
                exportgraphics(phandles{i},fn,'Append',true);
            end
        end
    else
        fprintf('%s plotLattice: Warning - LMAdist structure empty. trying TLdist structure \n', datetime);
        if(not(isempty(fieldnames(LS.LattPerf.TLdist))))
            phandles=plotLMAdist(LS.LattPerf.TLdist.outputs.LMAdist,...
                'dpminplot',dpminplotLMA,'dpmaxplot',dpmaxplotLMA,...
                'plottitle',LS.Lattice_Name);
            if (savef)
                nhandles=numel(phandles);
                for i=1:nhandles
                    exportgraphics(phandles{i},fn,'Append',true);
                end
            end
        else
            fprintf('%s plotLattice: Warning - TLdist structure empty. \n', datetime);
        end
    end
end

%% Touschek lifetime with errors
if (allf||TLTdistf)
    if(not(isempty(fieldnames(LS.LattPerf.TLdist))))
        phandles=plotTLTdist(LS.LattPerf.TLdist,'plottitle',LS.Lattice_Name);
        if (savef)
            nhandles=numel(phandles);
            for i=1:nhandles
                exportgraphics(phandles{i},fn,'Append',true);
            end
        end
    else
        fprintf('%s plotLattice: Warning - TLdist structure empty. \n', datetime);
    end
end
%% Tune diffusion map for full ring without and with errors
if (allf||TMdistf)
    if(not(isempty(fieldnames(LS.LattPerf.TMdist))))
        phandles=plotTuneMap(LS.LattPerf.TMdist.outputs.TMs{1},...
            'rate',...
            'xminplot_dm',xminplot_dm,'xmaxplot_dm',xmaxplot_dm,...
            'yminplot_dm',yminplot_dm,'ymaxplot_dm',ymaxplot_dm,...
            'plottype','difxy','caxrange',caxrange_r,...
            'plottitle',strcat(LS.Lattice_Name,': no errors'));
        if (savef)
            nhandles=numel(phandles);
            for i=1:nhandles
                exportgraphics(phandles{i},fn,'Append',true);
            end
        end
        phandles=plotTuneMap(LS.LattPerf.TMdist.outputs.TMs{2},...
            'rate',...
            'xminplot_dm',xminplot_dm,'xmaxplot_dm',xmaxplot_dm,...
            'yminplot_dm',yminplot_dm,'ymaxplot_dm',ymaxplot_dm,...
            'plottype','difxy','caxrange',caxrange_r, ...
            'plottitle',strcat(LS.Lattice_Name,': with errors'));
        if (savef)
            nhandles=numel(phandles);
            for i=1:nhandles
                exportgraphics(phandles{i},fn,'Append',true);
            end
        end
    else
        fprintf('%s plotLattice: Warning - TLdist structure empty. \n', datetime);
    end
end
