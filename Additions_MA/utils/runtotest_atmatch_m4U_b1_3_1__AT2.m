function [RING, RING_matched_optconstr,penalty,dmin] = runtotest_atmatch_m4U_b1_3_1__AT2
% macro match dba test lattice beta functions and dispersion using
% quadrupoles.
%
% this macro shows the available functionalities of atmatch. 
% 
% various variable and constraint input constructions are shown

%clear all
%global NUtgt
load('TUNEPOINT')
%load('m4U_240114_b1_3_1.mat','RING'); % 
%%load('m4U_240114_b1_3_1_M1.mat','RING_matched_optconstr'); RING = RING_matched_optconstr; clear RING_matched_optconstr
%%load('m4U_240114_b1_3_1_M2.mat','RING_matched_optconstr'); RING = RING_matched_optconstr; clear RING_matched_optconstr

load('m4U_240114_b1_3_1_M3__fitCS1S3.mat','RING_matched_optconstr__fitC'); RING = RING_matched_optconstr__fitC; clear RING_matched_optconstr__fitC
addpath(fullfile(pwd,'..'))

%%  VARIABLES - gradients

kR2start=getcellstruct(RING,'PolynomB',findcells(RING,'FamName','R2'),1,2);
VR2K = struct('Indx',{findcells(RING,'FamName','R2'), ...
                    @(RING,K1Val)VaryQuadFam(RING,K1Val,'R2')},...
            'Parameter',{{'PolynomB',{1,2}},kR2start(1)},...
            'LowLim',{[]},...
            'HighLim',{[]}...
            );

kR1start=getcellstruct(RING,'PolynomB',findcells(RING,'FamName','R1'),1,2);
VR1K = struct('Indx',{findcells(RING,'FamName','R1'), ...
                    @(RING,K1Val)VaryQuadFam(RING,K1Val,'R1')},...
            'Parameter',{{'PolynomB',{1,2}},kR1start(1)},...
            'LowLim',{[]},...
            'HighLim',{[]}...
            );



kQ1start=getcellstruct(RING,'PolynomB',findcells(RING,'FamName','Q1'),1,2);
VQ1K = struct('Indx',{findcells(RING,'FamName','Q1'), ...
                    @(RING,K1Val)VaryQuadFam(RING,K1Val,'Q1')},...
            'Parameter',{{'PolynomB',{1,2}},kQ1start(1)},...
            'LowLim',{[],[]},...
            'HighLim',{[],[]}...
            );

kQ2start=getcellstruct(RING,'PolynomB',findcells(RING,'FamName','Q2'),1,2);
VQ2K = struct('Indx',{findcells(RING,'FamName','Q2'), ...
                    @(RING,K1Val)VaryQuadFam(RING,K1Val,'Q2')},...
            'Parameter',{{'PolynomB',{1,2}},kQ2start(1)},...
            'LowLim',{[],[]},...
            'HighLim',{[],[]}...
            );

kQ3start=getcellstruct(RING,'PolynomB',findcells(RING,'FamName','Q3'),1,2);
VQ3K = struct('Indx',{findcells(RING,'FamName','Q3'), ...
                    @(RING,K1Val)VaryQuadFam(RING,K1Val,'Q3')},...
            'Parameter',{{'PolynomB',{1,2}},kQ3start(1)},...
            'LowLim',{[],[]},...
            'HighLim',{[],[]}...
            );

kQ4start=getcellstruct(RING,'PolynomB',findcells(RING,'FamName','Q4'),1,2);
VQ4K = struct('Indx',{findcells(RING,'FamName','Q4'), ...
                    @(RING,K1Val)VaryQuadFam(RING,K1Val,'Q4')},...
            'Parameter',{{'PolynomB',{1,2}},kQ4start(1)},...
            'LowLim',{[],[]},...
            'HighLim',{[],[]}...
            );

kQ5start=getcellstruct(RING,'PolynomB',findcells(RING,'FamName','Q5'),1,2);
VQ5K = struct('Indx',{findcells(RING,'FamName','Q5'), ...
                    @(RING,K1Val)VaryQuadFam(RING,K1Val,'Q5')},...
            'Parameter',{{'PolynomB',{1,2}},kQ5start(1)},...
            'LowLim',{[],[]},...
            'HighLim',{[],[]}...
            );

kQ6start=getcellstruct(RING,'PolynomB',findcells(RING,'FamName','Q6'),1,2);
VQ6K = struct('Indx',{findcells(RING,'FamName','Q6'), ...
                    @(RING,K1Val)VaryQuadFam(RING,K1Val,'Q6')},...
            'Parameter',{{'PolynomB',{1,2}},kQ6start(1)},...
            'LowLim',{[],[]},...
            'HighLim',{[],[]}...
            );

kDmstart=getcellstruct(RING,'PolynomB',findcells(RING,'FamName','Dm'),1,2);
VDmK = struct('Indx',{findcells(RING,'FamName','Dm'), ...
                    @(RING,K1Val)VaryDIPGrad3(RING,K1Val,'Dm')},...
            'Parameter',{{'PolynomB',{1,2}},kDmstart(1)},...
            'LowLim',{[],[]},...
            'HighLim',{[],[]}...
            );
% indx6    = linspace(6,234,20); % full-ring
indx_d1_6    = linspace(6,18,2);   % achromat only

d1i      = findcells(RING,'FamName','D1');
kD1start6=getcellstruct(RING,'PolynomB',d1i(indx_d1_6),1,2);
kD1start = getcellstruct(RING,'PolynomB',findcells(RING,'FamName','D1'),1,2);
VD1K = struct('Indx',{findcells(RING,'FamName','D1'), ...
                    @(RING,K1Val)VaryDIPGrad3(RING,K1Val,'D1')},...
            'Parameter',{{'PolynomB',{1,2}},kD1start6(1)},...
            'LowLim',{[],[]},...
            'HighLim',{[],[]}...
            );

d2i      = findcells(RING,'FamName','D2');
kD2start6=getcellstruct(RING,'PolynomB',d2i(indx_d1_6),1,2);
VD2K = struct('Indx',{findcells(RING,'FamName','D2'), ...
                    @(RING,K1Val)VaryDIPGrad3(RING,K1Val,'D2')},...
            'Parameter',{{'PolynomB',{1,2}},kD2start6(1)},...
            'LowLim',{[],[]},...
            'HighLim',{[],[]}...
            );

indx_d3_6 = 6; 
d3i      = findcells(RING,'FamName','D3');
kD3start6=getcellstruct(RING,'PolynomB',d3i(indx_d3_6),1,2);

VD3K = struct('Indx',{findcells(RING,'FamName','D3'), ...
                    @(RING,K1Val)VaryDIPGrad3(RING,K1Val,'D3')},...
            'Parameter',{{'PolynomB',{1,2}},kD3start6(1)},...
            'LowLim',{[],[]},...
            'HighLim',{[],[]}...
            );

k2S1start=getcellstruct(RING,'PolynomB',findcells(RING,'FamName','S1'),1,3);
VS1K2 = struct('Indx',{findcells(RING,'FamName','S1'), ...
                    @(RING,K2Val)VarySextFam(RING,K2Val,'S1')},...
            'Parameter',{{'PolynomB',{1,3}},k2S1start(1)},...
            'LowLim',{[],[]},...
            'HighLim',{[],[]}...
            );

k2S2start=getcellstruct(RING,'PolynomB',findcells(RING,'FamName','S2'),1,3);
VS2K2 = struct('Indx',{findcells(RING,'FamName','S2'), ...
                    @(RING,K2Val)VarySextFam(RING,K2Val,'S2')},...
            'Parameter',{{'PolynomB',{1,3}},k2S2start(1)},...
            'LowLim',{[],[]},...
            'HighLim',{[],[]}...
            );

k2S3start=getcellstruct(RING,'PolynomB',findcells(RING,'FamName','S3'),1,3);
VS3K2 = struct('Indx',{findcells(RING,'FamName','S3'), ...
                    @(RING,K2Val)VarySextFam(RING,K2Val,'S3')},...
            'Parameter',{{'PolynomB',{1,3}},k2S3start(1)},...
            'LowLim',{[],[]},...
            'HighLim',{[],[]}...
            );

k2S4start=getcellstruct(RING,'PolynomB',findcells(RING,'FamName','S4'),1,3);
VS4K2 = struct('Indx',{findcells(RING,'FamName','S4'), ...
                    @(RING,K2Val)VarySextFam(RING,K2Val,'S4')},...
            'Parameter',{{'PolynomB',{1,3}},k2S4start(1)},...
            'LowLim',{[],[]},...
            'HighLim',{[],[]}...
            );

k2S5start=getcellstruct(RING,'PolynomB',findcells(RING,'FamName','S5'),1,3);
VS5K2 = struct('Indx',{findcells(RING,'FamName','S5'), ...
                    @(RING,K2Val)VarySextFam(RING,K2Val,'S5')},...
            'Parameter',{{'PolynomB',{1,3}},k2S5start(1)},...
            'LowLim',{[],[]},...
            'HighLim',{[],[]}...
            );

VarK  = [VQ1K, VQ2K, VQ3K, VQ4K, VQ5K, VQ6K, VR1K, VR2K];
VarK2 = [VS3K2, VS4K2];
Variab = VarK; 


%%  CONSTRAINTS
lgbhindx = findcells(RING,'FamName','LGBh');
s1hindx  = findcells(RING,'FamName','S1h');
qm3indx  = findcells(RING,'FamName','QM3');

d1indx   = findcells(RING,'FamName','D1');
d2indx   = findcells(RING,'FamName','D2');
d3indx   = findcells(RING,'FamName','D3');
r1indx   = findcells(RING,'FamName','R1');
r2indx   = findcells(RING,'FamName','R2');

DxInjStr=struct('Fun',@(RING,~,~)dispx2(RING,1),...
     'Min',0.000,...
     'Max',0.000,...
     'RefPoints',[1],...
     'Weight',1e-5);
DxpInjStr=struct('Fun',@(RING,~,~)dispxp2(RING,1),...
     'Min',0.000,...
     'Max',0.000,...
     'RefPoints',[1],...
     'Weight',1e-5);
AxInjStr=struct('Fun',@(RING,~,~)alfx(RING,1),...
    'Min',0.0,...
    'Max',0.0,...
    'RefPoints',[1],...
    'Weight',0.1);
BxInjStr=struct('Fun',@(RING,~,~)betx(RING,1),...
    'Min',10.0,...
    'Max',10.0,...
    'RefPoints',[1],...
    'Weight',0.1);

ByInjStr=struct('Fun',@(RING,~,~)bety(RING,1),...
    'Min',5.0,...
    'Max',5.0,...
    'RefPoints',[1],...
    'Weight',0.1);


MaxBy=struct('Fun',@(RING,~,~)max(bety(RING,52:114)),...
    'Min',0,...
    'Max',5,...
    'RefPoints',[],...
    'Weight',1);

MaxDx=struct('Fun',@(RING,~,~)max(dispx2(RING,1:166)),...
    'Min',0.034,...
    'Max',0.034,...
    'RefPoints',[],...
    'Weight',1e-3);

minDx=struct('Fun',@(RING,~,~)min(dispx2(RING,52:114)),...
    'Min',0.0025,...
    'Max',0.0045,...
    'RefPoints',[],...
    'Weight',1e-3);

EMIX=struct('Fun',@(RING,~,~)emix(RING),...
    'Min',85e-12,...
    'Max',90e-12,...
    'RefPoints',[],...
    'Weight',1e-13);
NUX=struct('Fun',@(RING,~,~)nux(RING,20),...
    'Min',NUtgt(1),... %56.17
    'Max',NUtgt(1),...
    'RefPoints',[],...
    'Weight',0.01*1);
NUY=struct('Fun',@(RING,~,~)nuy(RING,20),...
    'Min',NUtgt(2),... %16.36
    'Max',NUtgt(2),...
    'RefPoints',[],...
    'Weight',0.01*1);

DNUX_uc3 = struct('Fun',@(RING,~,~)DnuxUC3(RING,20),...
     'Min',0.42,...
     'Max',0.42,...
     'RefPoints',[],...
     'Weight',0.001);

DNUX_uc2 = struct('Fun',@(RING,~,~)DnuxUC2(RING,20),...
     'Min',0.39,...
     'Max',0.39,...
     'RefPoints',[],...
     'Weight',0.001);

DNUY_uc3 = struct('Fun',@(RING,~,~)DnuyUC3(RING,20),...
    'Min',0.12,...
    'Max',0.12,...
    'RefPoints',[],...
    'Weight',0.001);

DNUY_uc2 = struct('Fun',@(RING,~,~)DnuyUC2(RING,20),...
    'Min',0.0925,...
    'Max',0.0925,...
    'RefPoints',[],...
    'Weight',0.001);
XIX=struct('Fun',@(RING,~,~)xix(RING,20),...
    'Min',1,...
    'Max',1,...
    'RefPoints',[],...
    'Weight',0.1);
XIY=struct('Fun',@(RING,~,~)xiy(RING,20),...
    'Min',1,...
    'Max',1,...
    'RefPoints',[],...
    'Weight',0.1);

%Constr = [ BxInjStr ByInjStr DxInjStr DxpInjStr AxInjStr EMIX ];%MB22 MD22 DD202 XIX XIY]; %  C41 C42 C51 C52 C61 C62];
Constr = [ NUX NUY  DNUY_uc2 DNUX_uc2 DNUY_uc3 DNUX_uc3 DxInjStr DxpInjStr];%MB22 MD22 DD202 XIX XIY]; %  C41 C42 C51 C52 C61 C62];

verbo = 3; %3
[RING_matched_optconstr, penalty, dmin] =atmatch(RING,Variab,Constr,10^-6,5000,3,@lsqnonlin,'verbose',verbo,'UseParallel',true);%


if 1==0
figure;atplot(RING);% export_fig('ringdba.pdf','-transparent');

figure;atplot(RING_matched_optconstr);% export_fig('ringdba_matched.pdf','-transparent');
end