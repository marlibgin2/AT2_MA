function plotADTS(adts,varargin)
% Plots amplitude dependetn tune shifts
%% Mandatory inputs  
% adts: structure generated by the calcADTS function
%
%% Optional inputs
%
% note: defaults are taken from adts structure
%
% plotmode: 'abs' : plots full tune value (including integer part)
%           'rel' : plots tune variations with respect to small amplitude
%                   tunes.
% plane: 'X', 'Y', 'XY', 'td' (td draws a tune diagram - fractional part only)
% resorder: resonance order for tune diagram, default = 5
% zoomx   : zoom factor for horizontal direction in tune diagram
% zoomy   : zoom factor for horizontal direction in tune diagram
%
%% Usage examples
% plotADTS(adts,'plane','x','plotmode','rel');

%% Input argument parsing
plotmode = getoption(varargin,'plotmode',adts.inputs.plotmode);
plane    = getoption(varargin,'plane',adts.inputs.plane);
resorder = getoption(varargin,'resorder',5);
zoomx    = getoption(varargin,'zoomx',0.0);
zoomy    = getoption(varargin,'zoomy',0.0);

xmin  = adts.inputs.xmin;
xmax  = adts.inputs.xmax;
ymax  = adts.inputs.ymax;
amplx = adts.outputs.amplx;
amply = adts.outputs.amply;

%% Plots ADTS
switch plotmode
    case 'abs'
       Qxxplot  = adts.outputs.Qxx;
       Qyxplot  = adts.outputs.Qyx;
       Qxyplot  = adts.outputs.Qxy;
       Qyyplot  = adts.outputs.Qyy;

    case 'rel'
        Qxxplot  = adts.outputs.dQxx;
        Qyxplot  = adts.outputs.dQyx;
        Qxyplot  = adts.outputs.dQxy;
        Qyyplot  = adts.outputs.dQyy;

    otherwise
        fprintf('%s Error in plotADTS. Unknown plot mode : %s \n', ...
                   datetime, plotmode);
        return
end

switch plane

    case {'x';'X'}
        if not(isempty(amplx))
            figure; xlim([xmin*1000,xmax*1000]);
            plot(amplx*1000,Qxxplot,'-ok');xlabel('X[mm]');
            hold on;
            if (strcmpi(plotmode,'abs'))
                ylabel('Qx');
                yyaxis right; 
            else
                ylabel('dQ');
            end
            plot(amplx*1000,Qyxplot,'-or');
            if (strcmpi(plotmode,'abs'))
                ylabel('Qy');
                legend({'Qx';'Qy'});
            else
                legend({'dQx';'dQy'});
            end
            grid on;
        end
        
    case {'y';'Y'}
        if not(isempty(amply))
            figure; xlim([0,ymax*1000]); 
            plot(amply*1000,Qxyplot,'-ok');xlabel('Y[mm]');
            hold on;
            if (strcmpi(plotmode,'abs'))
                ylabel('Qx');
                yyaxis right; 
            else
                ylabel('dQ');
            end
            plot(amply*1000,Qyyplot,'-or');
            if (strcmpi(plotmode,'abs'))
                ylabel('Qy');
                legend({'Qx';'Qy'});
            else
                legend({'dQx';'dQy'});
            end
            grid on;
        end

    case {'xy';'XY';'xY';'Xy'}
        if not(isempty(amplx))
            figure; xlim([xmin*1000,xmax*1000]);
            plot(amplx*1000,Qxxplot,'-ok');xlabel('X[mm]');
            hold on;
            if (strcmpi(plotmode,'abs'))
                ylabel('Qx');
                yyaxis right; 
            else
                ylabel('dQ');
            end
            plot(amplx*1000,Qyxplot,'-or');
            if (strcmpi(plotmode,'abs'))
                ylabel('Qy');
                legend({'Qx';'Qy'});
            else
                legend({'dQx';'dQy'});
            end
            grid on;
        end

        if not(isempty(amply))
            figure; xlim([0,ymax*1000]); 
            plot(amply*1000,Qxyplot,'-ok');xlabel('Y[mm]');
            hold on;
            if (strcmpi(plotmode,'abs'))
                ylabel('Qx');
                yyaxis right; 
            else
                ylabel('dQ');
            end
            plot(amply*1000,Qyyplot,'-or');
            if (strcmpi(plotmode,'abs'))
                ylabel('Qy');
                legend({'Qx';'Qy'});
            else
                legend({'dQx';'dQy'});
            end
            grid on;
        end

    case {'td'}
        Qxxfrac=adts.outputs.Qxxfrac;
        Qyxfrac=adts.outputs.Qyxfrac;
        Qxyfrac=adts.outputs.Qxyfrac;
        Qyyfrac=adts.outputs.Qyyfrac;

        figure;plot(Qxxfrac,Qyxfrac,'ob');hold;
        plot(Qxyfrac,Qyyfrac,'or');
        plot_net(resorder,min(min(Qxxfrac),min(Qxyfrac))*(1-zoomx),...
                          max(max(Qxxfrac),max(Qxyfrac))*(1+zoomx),...
                          min(min(Qyxfrac),min(Qyyfrac))*(1-zoomy),...
                          min(max(Qyxfrac),max(Qyyfrac))*(1+zoomy));
        xlabel('qx');ylabel('qy');
        grid;

    otherwise
        fprintf('%s Error in plotADTS: unknown plane: %s \n',datetime,plane);       
        return
end
    
