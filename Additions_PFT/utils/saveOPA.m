function saveOPA(XAll,Ks,Scs,LatticeOptData,RunNumber)
% Saves an OPA input file corresponding to an AT 2.0 input
% The AT 2.0 inut is defined by a vector of magnet strengths for either all
% magnet families (XAll) or a set of decision variables (Ks) and two
% sextupole strengths setting chromaticity (Scs).
% Use of XAll is recommended, whereas Ks and Scs are maintained for backwar
% compatibility. The structure LatticeOptData (generated by running max4U.m
% defeines the lattice structres to whihc these vectos apply.
%   
%% preamble
Trb = LatticeOptData.Trb;
nvars = LatticeOptData.nvars;

%% Checks for backward compatibility
%
if (isfield(LatticeOptData,'optMode'))
    optMode  = LatticeOptData.optMode;
else
    optMode = 'SIMP';
end

if (isfield(LatticeOptData,'revBmode'))
    revBmode  = LatticeOptData.revBmode;
else
    revBmode = 'All';
end

if(isfield(LatticeOptData,'lattMode'))
    lattMode = LatticeOptData.lattMode;
else
    switch revBmode
        case "All"
            lattMode= 'c1';
        case "U3"
            lattMode= 'b1';
        otherwise
            fprinf ('unknown deprecated lattice mode %s \n', revBmode)
    end
end

scan_fams = LatticeOptData.scan_fams;

if (isfield(LatticeOptData,'lin_fams'))
    lin_fams  = LatticeOptData.lin_fams;
else
    lin_fams  ={};
end
%% Selects template file
OPA_TemplatesFolder = 'OPA_Templates/';
OPA_InputsFolder  = 'OPA_Inputs/';
switch lattMode
     case 'b1'
        switch optMode
          case 'CHRO'
             filein = 'm4_Studies_InputfromMSOGA_AT_Template_CHROU3.opa';
             fileout = 'm4_Studies_InputfromMSOGA_AT_CHROU3.opa';
          case {'Linear';'NonLinear';'Full'}
             filein  = 'm4U_MSOGA_Template_b1.opa';
             fileout = 'm4U_MSOGA_b1.opa';
          otherwise
             fprintf('Unknown optmization mode %s. Aborting \n', optMode);
          return
         end

     case 'b2'
        filein  = 'm4U_MSOGA_Template_b2.opa'; 
        fileout = 'm4U_MSOGA_b2.opa';

     case 'b3'
         filein  = 'm4U_MSOGA_Template_b3.opa';
         fileout = 'm4U_MSOGA_b3.opa';  
        
     case 'c1'
        switch optMode
          case 'SIMP' % deprecated maintained for backward compatibility
             filein = 'm4_Studies_InputfromMSOGA_AT_Template.opa';
             fileout = 'm4_Studies_InputfromMSOGA_AT.opa';
          case 'COMP' % deprecated maintained for backward compatibility
             filein = 'm4_Studies_InputfromMSOGA_AT_Template_COMP.opa';
             fileout = 'm4_Studies_InputfromMSOGA_AT_COMP.opa';
          case 'CHRO' % deprecated maintained for backward compatibility
             filein = 'm4_Studies_InputfromMSOGA_AT_Template_CHRO.opa';
             fileout = 'm4_Studies_InputfromMSOGA_AT_CHRO.opa';
          case 'SEXT' % deprecated maintained for backward compatibility
             filein = 'm4_Studies_InputfromMSOGA_AT_Template_SEXT.opa';
             fileout = 'm4_Studies_InputfromMSOGA_AT_SEXT.opa';
          case {'Linear';'NonLinear';'Full'}
             filein  = 'm4U_MSOGA_Template_c1.opa';
             fileout = 'm4U_MSOGA_c1.opa';
          otherwise
             fprintf('Unknown optmization mode %s. Aborting \n', optMode);
             return
        end
     otherwise
        fprintf('Unknown Lattice mode %s. Aborting \n', lattMode);
        return
end

%% Saves All magnet strengths (new version) or Decision Variable/DVLins/Sextupole (legacy)
filein   = strcat(OPA_TemplatesFolder,filein);
fileout  = strcat(OPA_InputsFolder,fileout);
fileIDin = fopen(filein,'r');
fileIDout = fopen(fileout,'w');

fprintf(fileIDout, '{ Decision Variables from Run  %s } \r\n', RunNumber);
if (isfield(LatticeOptData,'All_fams'))
     for i=1:LatticeOptData.nallfams
         fprintf(fileIDout, 'DV%02d  = %8.5f ; { %s } \r\n',i,XAll(i),LatticeOptData.All_fams{i});
     end
else
%
% Legacy code for backward compatibility
%
     for i=1:nvars
       fprintf(fileIDout,'DV%02d = %8.5f ; { %s } \r\n',i,Ks(i),scan_fams{i});
     end
%
% if SEXT (legacy) or NonLinear optimization modes includes linear optics parameters
%
     if (strcmp(optMode,'SEXT')||strcmp(optMode,'NonLinear'))
       nvars_lin=LatticeOptData.nvars_lin;
       for i=1:nvars_lin
          fprintf(fileIDout, 'DVLins%02d  = %8.5f ; { %s } \r\n',i,DVLins(i),lin_fams{i});
       end
     end

 %
 % in 'CHROM' or 'SEXT' modes (legacy) or 'NonLinear' or 'Full' modes,
 % saves also the strengths of sextupoles used for chromaticity correction
 %
    if (strcmp(optMode,'CHRO')||strcmp(optMode,'SEXT')||strcmp(optMode,'NonLinear')||strcmp(optMode,'Full'))
        fprintf(fileIDout, 'Sc1MSOGA  = %8.5f ; \r\n', Scs(1));
        fprintf(fileIDout, 'Sc2MSOGA = %8.5f ; \r\n', Scs(2));
    end
 end

 fprintf(fileIDout, 'RBKMSOGA = %8.5f ;\r\n', Trb);
 
%% Copies template file

 while 1
     tline = fgetl(fileIDin);
     if ~ischar(tline), break, end
     fprintf(fileIDout,'%s \r\n', tline);
  end
  fclose(fileIDin);
  fclose(fileIDout);
  fprintf('saved OPA file %s \n',fileout);

