function [c,ceq] = LimSext(x,LatticeOptData,SMax)
%
% inputs: x - lattice decision variables
%         Lattice OptData: struture with Lattice data - generated by
%                          script (max4_UpgradeStudies).
% outputs: c(1)= abs(SD) - Sdmax
%          c(2)=abs(SF) - Smax
%
% only lattices with chromaticity correction sextupoles with strengths 
% less that a given value are accepted
%

ACHRO    = LatticeOptData.ACHRO;
chroms0  = LatticeOptData.DAoptions.chroms0;
TolChrom = LatticeOptData.DAoptions.TolChrom;
Nitchro  = LatticeOptData.DAoptions.Nitchro; 

Isd  = LatticeOptData.Isd_achro;
Isfi = LatticeOptData.Isfi_achro;

ACHRO  = setDVs(2, ACHRO,LatticeOptData, x);
%
% Evaluates constraints
%
ceq=[];
%
% Corrects chromaticity
%

try
  k=0;    
  [~,chr]=tunechrom(ACHRO);
  while ( ((abs(chr(1)-chroms0(1))>TolChrom(1))||...
          (abs(chr(2)-chroms0(2))>TolChrom(2))) &&(k<Nitchro))
      ACHRO=atfitchrom(ACHRO,chroms0,'hsd_rbchro','hsfi_rbchro');
      [~,chr]=tunechrom(ACHRO);
      k=k+1;
  end
  sd  = ACHRO{Isd(1)}.PolynomB(3);
  sfi = ACHRO{Isfi(1)}.PolynomB(3);
  
  c(1) = (abs(sd)-SMax)/SMax;
  c(2) = (abs(sfi)- SMax)/SMax;

catch ME
    fprintf('Error in Chromaticity fitting \n');
    fprintf('Error message was:%s \n',ME.message);
    c(1)=0;
    c(2)=0;
end
